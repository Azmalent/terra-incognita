//file:noinspection SpellCheckingInspection
plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'io.github.CDAGaming.cursegradle' version '1.6.1'
    id 'com.modrinth.minotaur' version '2.+'
}

group = "azmalent"
version = "${minecraft_version}-${mod_version}"

base {
    archivesName = modid
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

idea {
    module {
        excludeDirs << file('models')
        excludeDirs << file('run')
    }
}

minecraft {
    mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven { // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven { // TOP
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }

    maven { // Quark
        name "blamejared"
        url "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //Required dependencies
    implementation fg.deobf("maven.modrinth:cuneiform:${cuneiform_version}")
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")

    //Optional dependencies
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    implementation fg.deobf("maven.modrinth:jade:${jade_version}")
    implementation fg.deobf("maven.modrinth:the-one-probe:${top_version}")

    runtimeOnly fg.deobf("vazkii.autoreglib:AutoRegLib:1.7-54.112")
    implementation fg.deobf("vazkii.quark:Quark:${quark_version}.${quark_build_number}")

    runtimeOnly fg.deobf("maven.modrinth:blueprint:${blueprint_version}")
    implementation fg.deobf("maven.modrinth:woodworks:${woodworks_version}")
    implementation fg.deobf("maven.modrinth:clayworks:${clayworks_version}")

    implementation fg.deobf("maven.modrinth:farmers-delight:${farmers_delight_version}")

    compileOnly fg.deobf("vazkii.botania:Botania:${minecraft_version}-${botania_version}:api")

    //Runtime extras
    runtimeOnly fg.deobf("maven.modrinth:rubidium:${rubidium_version}")
    runtimeOnly fg.deobf("maven.modrinth:cyanide:${cyanide_version}")
    runtimeOnly fg.deobf("maven.modrinth:atmospheric:${atmospheric_version}")
}

mixin {
    add sourceSets.main, "${modid}.mixins.refmap.json"
    config "${modid}.mixins.json"
}

processResources {
    var replaceProperties = [
            'mod_name': mod_name, 'mod_version': project.version,
            'minecraft_version': minecraft_version, 'minecraft_version_range': minecraft_version_range,
            'fml_min': fml_min, 'forge_version': forge_version,
            'cuneiform_version': cuneiform_version,
            'terrablender_version': terrablender_version,
            'jei_version': jei_version,
            'quark_version': quark_version
    ]

    inputs.properties replaceProperties

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": modid,
                "Specification-Vendor": "azmalent",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": "azmalent",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                "MixinConfigs": "${modid}.mixins.json",
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true'
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:all,-deprecation,-processing"
}

curseforge {
    apiKey = curseforgeToken
    
    project {
        id = '435386'
        addGameVersion minecraft_version

        releaseType = mod_version_type

        changelogType = 'markdown'
        changelog = file('CHANGELOG.md')

        mainArtifact(jar) {
            it.displayName = "${mod_name} ${mod_version}"

            relations {
                it.requiredDependency 'cuneiform'
                it.requiredDependency 'terrablender'
                it.optionalDependency 'quark'
                it.optionalDependency 'farmers-delight'
                it.optionalDependency 'botania'
            }
        }
    }
}

modrinth {
    token = modrinthToken
    projectId = "terra-incognita"
    uploadFile = jar

    gameVersions = [minecraft_version]
    
    versionName = "${mod_name} ${mod_version}" 
    versionNumber = mod_version
    versionType = mod_version_type

    changelog = file('CHANGELOG.md').text

    dependencies {
        required.project 'cuneiform'
        required.project 'terrablender'
        optional.project 'quark'
        optional.project 'farmers-delight'
        optional.project 'botania'
    }
}