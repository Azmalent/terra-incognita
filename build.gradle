//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.minecraft_version}-${config.mod_version}"
group = "azmalent.${config.modid}"
archivesBaseName = config.modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.compilerArgs << "-Xlint:all,-deprecation"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: config.mappings_channel, version: config.mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=terraincognita.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                terraincognita {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=terraincognita.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                terraincognita {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'terraincognita', '--all', '--output', file('src/generated/resources/'), '-mixin.config=terraincognita.mixins.json'
            mods {
                terraincognita {
                    source sourceSets.main
                }
            }
        }
    }
}


mixin {
    add sourceSets.main, "${config.modid}.mixins.refmap.json"
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
    maven { // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // TOP
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven { // Quark
        name "blamejared"
        url "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation name: "cuneiform-${config.minecraft_version}-${config.cuneiform_version}"
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${config.minecraft_version}-${config.terrablender_version}")

    compileOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}:api")
    compileOnly fg.deobf("curse.maven:jade-api-324717:${config.jade_api_file_id}")
    implementation fg.deobf("curse.maven:jade-324717:${config.jade_file_id}")
    implementation fg.deobf("curse.maven:the-one-probe-245211:3671753") //not yet on maven

    compileOnly fg.deobf("vazkii.quark:Quark:${config.quark_version}")
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'mod_name': config.mod_name, 'mod_version': config.project.version,
                'minecraft_version': config.minecraft_version, 'minecraft_version_range': config.minecraft_version_range,
                'fml_min': config.fml_min, 'forge_version': config.forge_version,
                'cuneiform_version': config.cuneiform_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    duplicatesStrategy 'include'
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${config.modid}",
                "Specification-Vendor": "azmalent",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "${config.modid}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor": "azmalent",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                "MixinConfigs": "${config.modid}.mixins.json",
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true'
        ])
    }
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar.finalizedBy('reobfJar')